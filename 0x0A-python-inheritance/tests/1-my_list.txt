=======
Doctest
=======

class MyList that inherits from list:

Public instance method: def print_sorted(self): that prints the list,
 but sorted (ascending sort)
You can assume that all the elements of the list will be of type int.

Test instance
==============

** Test one argument **

	>>> MyList = __import__('1-my_list').MyList
	>>> my_list = MyList(10)
	Traceback (most recent call last):
		...
	TypeError: 'int' object is not iterable


** Test  with two arguments **

    >>> my_list = MyList(6, 2)
    Traceback (most recent call last):
		...
    TypeError: list() takes at most 1 argument (2 given)


** Test Instance **

	>>> my_list = MyList()
    >>> isinstance(my_list, MyList)
    True


** Test	Type MyList **

    >>> type(my_list) == MyList
    True


Test method
============

** call method with an argument **

	>>> my_list.print_sorted(4)
	Traceback (most recent call last):
		...
	TypeError: print_sorted() takes 1 positional argument but 2 were given

** Print List **

	>>> my_list = MyList()
	>>> my_list.print_sorted()
	[]
	>>> my_list.append(8)
	>>> my_list.append(5)
	>>> my_list.append(-10)
	>>> my_list
	[8, 5, -10]
	>>> my_list += [4]
	>>> my_list.print_sorted()
	[-10, 4, 5, 8]
	>>> print(my_list)
	[8, 5, -10, 4]
